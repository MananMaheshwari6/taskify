version: "3.8"

services:
  # MongoDB Database
  mongodb:
    image: mongo:6.0
    container_name: taskify-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: taskify
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - taskify-network

  # Backend API
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: taskify-backend
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=4002
      - MONGODB_URI=mongodb://admin:password123@mongodb:27017/taskify?authSource=admin
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-your-super-secret-jwt-key-change-in-production}
      - FRONTEND_URL=http://localhost:3000
    ports:
      - "4002:4002"
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - taskify-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:4002/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend Application
  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
    container_name: taskify-frontend
    restart: unless-stopped
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - taskify-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Reverse Proxy (Optional - for production)
  nginx:
    image: nginx:alpine
    container_name: taskify-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - taskify-network
    profiles:
      - production

volumes:
  mongodb_data:
    driver: local

networks:
  taskify-network:
    driver: bridge
